분석 문제 : 분석한 내용을 직접 작성하고, 강의의 코드를 다시 한번 작성하며 복습해봅시다.

- 별도의 UI 스크립트를 만드는 이유에 대해 객체지향적 관점에서 생각해보세요.
여러개의 UI 오브젝트 들을 하나의 스크립트에서 관리하게 되면 UI 스크립트의 목적이 명확하지 않아지고 코드가 복잡해지는 문제가 있습니다.
되도록이면 기능별로 UI 스크립트를 분리하고 관리하는 것이 좋습니다.

- 인터페이스의 특징에 대해 정리해보고 구현된 로직을 분석해보세요.
현재 프로젝트에서 인터페이스를 사용하여 클래스간의 의존도를 낮추어 주는 역할을 하고 있습니다.
따라서 기능별로 클래스를 구현하지 않아도 인터페이스를 통해 추상적으로 로직을 수행 할 수 있습니다.

- 핵심 로직을 분석해보세요. (UI 스크립트 구조, `CampFire`, `DamageIndicator`)
UI 스크립트는 부모 UI가 자식 UI를 다른 오브젝트에서 식별 가능한 상태로 정의해주고, 자식 UI에서는 온전히 기능구현에만 사용됩니다.
다만 UIInventory의 경우에는 UIInventory 자체가 하나의 기능으로서 작동하기 때문에 아이템 관리는 기능(함수)들이 UIInventory 에 구현되어 있습니다.
이런 방식은 목적이 명확하기 때문에 좋은 방법이라고 생각합니다.

CampFire 는 Trigger를 통해 IDamageable 인터페이스를 상속받은 오브젝트가 인접해 있을 때, IDamangeable 을 리스트에 담아두고 InvokeRepeating을 통해 일정 시간마다 데미지를 입히는 로직입니다.

DamageIndicator 는 IDamageable 인터페이스를 상속받은 오브젝트가 데미지를 입었을 때, 데미지를 입는 것을 인지할 수 있도록 효과를 표시하는 로직입니다.